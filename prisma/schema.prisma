// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         Int       @id @default(autoincrement())
  personelId Personel?

  username String  @unique
  password String
  email    String?
}

model Personel {
  id        Int      @id @default(autoincrement())
  account   Account? @relation(fields: [accountId], references: [id])
  accountId Int?     @unique
  staff     Staff?
  dentist   Dentist?
  patient   Patient?

  nationalId String   @unique
  name       String
  dob        DateTime
  gender     String
  age        String
  phone      String?
}

model Staff {
  id         Int       @id @default(autoincrement())
  personel   Personel? @relation(fields: [personelId], references: [id])
  personelId Int?      @unique
}

model Dentist {
  id         Int        @id @default(autoincrement())
  personel   Personel?  @relation(fields: [personelId], references: [id])
  personelId Int?       @unique
  assistant  Assistant?
  session    Session[]
  schedule   Schedule[]
}

model Schedule {
  id        Int      @id @default(autoincrement())
  dentist   Dentist? @relation(fields: [dentistId], references: [id])
  dentistId Int?     @unique

  day   Day? @relation(fields: [dayId], references: [id])
  dayId Int? @unique
}

model Day {
  id       Int        @id @default(autoincrement())
  schedule Schedule[]

  day DateTime
}

model Assistant {
  id        Int       @id @default(autoincrement())
  dentist   Dentist?  @relation(fields: [dentistId], references: [id])
  dentistId Int?      @unique
  session   Session[]
}

model Patient {
  id            Int            @id @default(autoincrement())
  personel      Personel?      @relation(fields: [personelId], references: [id])
  personelId    Int?           @unique
  paymentRecord PaymentRecord?
  session       Session[]

  drugContraindications String?
  oralHealthStatus      String?
  allergicStatus        String?
}

model PaymentRecord {
  id                 Int               @id @default(autoincrement())
  patient            Patient?          @relation(fields: [patientId], references: [id])
  patientId          Int?              @unique
  treatmentSession   TreatmentSession? @relation(fields: [treatmentSessionId], references: [id])
  treatmentSessionId Int?              @unique

  date    DateTime
  total   Int
  paid    Int
  changed Int
  method  String
}

model Session {
  id          Int        @id @default(autoincrement())
  patient     Patient?   @relation(fields: [patientId], references: [id])
  patientId   Int?       @unique
  dentist     Dentist?   @relation(fields: [dentistId], references: [id])
  dentistId   Int?
  assistant   Assistant? @relation(fields: [assistantId], references: [id])
  assistantId Int?
  room        Room?      @relation(fields: [roomId], references: [id])
  roomId      Int

  reExaminationSession ReExaminationSession?
  ExaminationSession   ExaminationSession?
  TreatmentSession     TreatmentSession?

  time   DateTime
  note   String?
  status String
}

model Room {
  id      Int       @id @default(autoincrement())
  session Session[]

  name String
  code String
}

model ReExaminationSession {
  id                   Int                 @id @default(autoincrement())
  session              Session?            @relation(fields: [sessionId], references: [id])
  sessionId            Int?                @unique
  ExaminationSession   ExaminationSession? @relation(fields: [examinationSessionId], references: [id])
  examinationSessionId Int?
}

model ExaminationSession {
  id                   Int                    @id @default(autoincrement())
  session              Session?               @relation(fields: [sessionId], references: [id])
  sessionId            Int?                   @unique
  reExaminationSession ReExaminationSession[]
}

model TreatmentSession {
  id            Int            @id @default(autoincrement())
  session       Session?       @relation(fields: [sessionId], references: [id])
  sessionId     Int?           @unique
  category      Category?      @relation(fields: [categoryId], references: [id])
  categoryId    Int?           @unique
  prescription  Prescription[]
  toothSession  ToothSession[]
  paymentRecord PaymentRecord?

  healthNote  String?
  description String?
}

model Procedure {
  id         Int       @id @default(autoincrement())
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @unique

  description String
  code        String
  name        String
  fee         Int
}

model Category {
  id               Int                @id @default(autoincrement())
  procedure        Procedure[]
  treatmentSession TreatmentSession[]

  description String
  code        String
  name        String
}

model Prescription {
  id                 Int               @id @default(autoincrement())
  treatmentSession   TreatmentSession? @relation(fields: [treatmentSessionId], references: [id])
  treatmentSessionId Int?              @unique
  drug               Drug?             @relation(fields: [drugId], references: [id])
  drugId             Int?              @unique

  note String
}

model Drug {
  id           Int            @id @default(autoincrement())
  prescription Prescription[]

  name        String
  description String
  price       Int
  code        String
}

model Tooth {
  id           Int            @id @default(autoincrement())
  ToothSession ToothSession[]

  type String
  name String
}

model ToothSession {
  id                 Int               @id @default(autoincrement())
  tooth              Tooth?            @relation(fields: [toothId], references: [id])
  toothId            Int?              @unique
  treatmentSession   TreatmentSession? @relation(fields: [treatmentSessionId], references: [id])
  treatmentSessionId Int?              @unique

  order Int
}

model Appointment{
  id Int @id @default(autoincrement())

  appointmentTime DateTime
  requestTime DateTime
  note String?
  patientName String
  patientPhone String?
}